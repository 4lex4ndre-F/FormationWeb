Arborescence
    app/    : La configuration de notre application (paramètres de connexion à la bdd, paramètres de sécurité...)
    src/    : Le PHP et l'HTML spécifique à notre application (Controleurs, vues, models, entités spécifiques à notre application)
    vendor/ : Le code général (Coeur de l'application...fonctionnalités génériques)
    web/    : Le repertoire web racine (index.php, img/, photo/, js/, fonts/, css/) -> ce que l'utilisateur pourra visionner

---------------------------------------------------------------
Nature des différents fichiers :
app/
    Config/
        parameters.php : Contient toutes les informations de connexion à la bdd et tous les autres paramètres (sécu) qui auraient été nécessaire.

    config.php : Contient une classe dont l'objectif est de récupérer les paramètres et de les "servir". Par exemple, il va apporter à PDOManager les informations de connexion à la bdd.

src/
    Entity/
        Article.php, Membre.php, Commande.php : ces classes contiennent toutes les propriétés des entités de notre application. Ces classes sont appelées des POPO (Plain Old PHP Object). Puisqu'on travaille en objet, il faut bien un plan de construction pour créer les objets Article, Membre et Commande...

vendor/
    autoload.php : L'autoload permet d'inclure les bons fichiers lors d'une instanciation. Cela nous évite d'avoir à faire de nombreux require().

web/
    index.php : (controller frontal) C'est la clé d'entrée de notre application (Symfony : app.php ou app_dev.php // Silex : index.php). C'est à partir de là que le site se déploie. Dans notre application c'est ici que l'on va créer la session, et que nous instancierons la class Application qui lancera l'exécution grâce à la méthode run().

vendor/
    Manager/
        PDOManager.php : Cette classe représente la connexion à la bdd. elle contient et nous retourne notre objet PDO grâce auquel nous pourrons effectuer des requetes.
        Cette classe est un singleton, cela signifie qu'il ne peut y avoir qu'un seul objet issu de cette classe.

    Model/
        Model.php : Un model centralise tout ce qui touche à la bdd. Concrètement il ne devrait pas y avoir de requetes ailleurs que dans un Model. Nous aurons autant de Models que d'entités (ArticleModel.php, MembreModel.php etc...) et Model.php est la classe mère de tous les Models. Il effectue toutes les "tâches" communes aux models (Récupérer une connexion à la bdd, faire des requêtes génériques...).
        Model.php ne connait pas Article, Membre, Commande...

src/
    Model/
        ArticleModel.php : Ce fichier contiendra toutes les fonctions (requetes) liées à l'entité article et demandera à Model.php d'éxécuter des requêtes génériques !
        Si une entité a besoin de requêtes spécifiques (exemple : jointure) alors elles seront codées dans ce fichier.

vendor/
    Controller/
        Controller.php : C'est le controller général de l'application, il a pour objectif d'effectuer 2 missions :
            1/ Récupérer le bon Model en fonction de l'entité dans laquelle nous sommes (getModel())
            2/ Afficher la bonne vue avec les variables nécessaires à l'affichage (render())

src/
    Controller/
        ArticleController.php : Cette classe hérite du controller général de l'application, et permet de déclencher toutes les actions liées à l'entité article.

src/
    View/
        Article/
            boutique.php, fiche_article.php : On récupère les fichiers crées en procédural avec quelques modifications :
                1/ Header, nav et footer sont ré-incorporés (temporairement)
                2/ On retire tous les traitements PHP
                3/ Simplification du PHP à l'interieur de l'HTML (formes ternaires et conttractées)
                4/ On remplace l'appel aux array, par des objetsexemple : $article['prix] devient $article -> getPrix()

web/
    css/, fonts/, js/, img/, photo/ : On récupère les ressources (assets) du site en procédural. Toutes les vues du site feront appel à ses ressources directement via le nom du dossier.

src/
    View/
        Layout.html : ce fichie représente la structure de base d'une page (header, nav, footer). Si nécessaire; il peut y avoir plusieurs layout (exemple: la home peut avoir une structure très différente de la page mention légale).
        Le contenu de chaque vue sera représenté dans les layout par une variable ($content)

vendor/
    Controller/
        Controller.php : Ajout de la méthode render()
        + modification des Controleurs + modification des vues en .html

vendor/
    Manager/
        Application.php : C'est la classe qui est capable de lancer mon application. Elle va récupérer les informations dans l'URL (construct()), elle va instancier le bon controller et lancer la bonne methode (run()).
        ===> C'est mon "interrupteur".
        + modification de index.php
        +modification de tous les liens du site

==> Ajout de fonctionnalités :
    - formulaire de recherche
    - suggestion de produit
    - connexion
    - commentaires sur les articles
    - metions légale
    - routes ?
    - mettre un site en ligne